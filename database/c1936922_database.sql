-- MySQL Script generated by MySQL Workbench
-- Tue Apr 21 15:53:55 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering


SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema snakesAndLaddersData
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema snakesAndLaddersData
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `snakesAndLaddersDatabase`;
CREATE SCHEMA IF NOT EXISTS `snakesAndLaddersDatabase` DEFAULT CHARACTER SET utf8 ;
USE `snakesAndLaddersDatabase` ;


-- ----------------------------------------------------------------------------------
--
--
-- TABLE CREATIONS
-- 
--
-- ----------------------------------------------------------------------------------
-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Dice`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `snakesAndLaddersDatabase`.`Dice` (
  `diceID` INTEGER NOT NULL AUTO_INCREMENT,
  `diceCount` INT NOT NULL,
  `diceFaces` INT NOT NULL,
  PRIMARY KEY (`DiceID`))
ENGINE = InnoDB;


INSERT INTO Dice (diceCount, diceFaces) VALUES (1, 6);



-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Game`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `snakesAndLaddersDatabase`.`Game` (
  `gameID` INT NOT NULL AUTO_INCREMENT,
  `gamePlayerTurn` INT NOT NULL DEFAULT 1,
  `gameRound` INT NOT NULL DEFAULT 1,
  `boardGridSize` INT NOT NULL,
  `boardSize` INT NOT NULL,
--   `winningSquare` INT NULL,
  `gameHasEnded` TINYINT NULL DEFAULT false,
  `boostSquareFeature` TINYINT NULL DEFAULT false,
  `winningSquareOnlyFeature` TINYINT NULL DEFAULT false,
  `recordGameFeature` TINYINT NULL DEFAULT false,
  `dice_diceID` INT NOT NULL,
  PRIMARY KEY (`gameID`),
    FOREIGN KEY (`dice_diceID`)
    REFERENCES `snakesAndLaddersDatabase`.`Dice` (`diceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Players`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `snakesAndLaddersDatabase`.`players` (
  `playerID` INT NOT NULL AUTO_INCREMENT,
  -- `playerName` VARCHAR(45),
  `playerColour` VARCHAR(45) NOT NULL,
  `playerPosition` INT DEFAULT 0,
  `playerMovesTaken` INT DEFAULT 0,
  `playerWonGame` TINYINT DEFAULT false,
  `game_gameID` INT NOT NULL,
  `pl_PlayerListID`INT NOT NULL,
  PRIMARY KEY (`playerID`),
    FOREIGN KEY (`game_gameID`)
    REFERENCES `snakesAndLaddersDatabase`.`Game` (`gameID`),
    FOREIGN KEY (`pl_PlayerListID`)
    REFERENCES `snakesAndLaddersDatabase`.`PlayerList` (`PlayerListID`)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`PlayerList`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `snakesAndLaddersDatabase`.`PlayerList` (
	`PlayerListID` INT NOT NULL AUTO_INCREMENT,
    `playerName` VARCHAR(45),
    `playerWinCount` INT DEFAULT 0,
    `playerTotalMovesMade` INT DEFAULT 0,
    `playerAverageGameMoves` DECIMAL (4,2),
    PRIMARY KEY (`PlayerListID`))
ENGINE = InnoDB;
        
-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Snakes`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `snakesAndLaddersDatabase`.`Snakes` (
  `snakeID` INT NOT NULL AUTO_INCREMENT,
  `snakeHead` INT NOT NULL,
  `snakeTail` INT NOT NULL,
  `game_gameID` INT NOT NULL,
  PRIMARY KEY (`snakeID`),
    FOREIGN KEY (`game_gameID`)
    REFERENCES `snakesAndLaddersDatabase`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Ladders`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `snakesAndLaddersDatabase`.`Ladders` (
  `ladderID` INT NOT NULL AUTO_INCREMENT,
  `ladderFoot` INT NOT NULL,
  `ladderTop` INT NOT NULL,
  `game_gameID` INT NOT NULL,
  PRIMARY KEY (`ladderID`),
    FOREIGN KEY (`game_gameID`)
    REFERENCES `snakesAndLaddersDatabase`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Boosts`
-- -----------------------------------------------------

CREATE TABLE IF NOT EXISTS `snakesAndLaddersDatabase`.`Boosts` (
  `boostID` INT NOT NULL AUTO_INCREMENT,
  `boostLocation` INT NOT NULL,
  `game_gameID` INT NOT NULL,
  PRIMARY KEY (`boostID`),
    FOREIGN KEY (`Game_gameID`)
    REFERENCES `snakesAndLaddersDatabase`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Moves`
-- -----------------------------------------------------


CREATE TABLE IF NOT EXISTS `snakesAndLaddersDatabase`.`Moves` (
  `moveID` INT NOT NULL AUTO_INCREMENT,
  `moveStart` INT NOT NULL,
  `moveEnd` INT NOT NULL,
  `moveRoll` INT,
  `landedOnSnake` TINYINT DEFAULT 0,
  `landedOnLadder`TINYINT DEFAULT 0,
  `landedOnBoost`TINYINT DEFAULT 0,
  `players_playerID` INT NOT NULL,
  `game_gameID` INT NOT NULL,
  PRIMARY KEY (`moveID`),
    FOREIGN KEY (`players_playerID`)
    REFERENCES `snakesAndLaddersDatabase`.`players` (`playerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    FOREIGN KEY (`game_gameID`)
    REFERENCES `snakesAndLaddersDatabase`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;



-- ----------------------------------------------------------------------------------
--
--
-- GAME FUNCTIONS
-- 
--
-- ----------------------------------------------------------------------------------

-- -----------------------------------------------------
-- Counts amount of snake squares landed on in a game.
-- -----------------------------------------------------
DROP FUNCTION IF EXISTS snake_count_landed_in_game;

DELIMITER ££
CREATE FUNCTION snake_count_landed_in_game (gameChoice INT)
RETURNS INT NOT DETERMINISTIC

BEGIN

	DECLARE snakeCount INT;
    SET snakeCount = (SELECT COUNT(*) FROM Moves
					WHERE game_gameID = gameChoice
                    AND landedOnSnake = 1);
                    
	RETURN snakeCount;
			
END ££
DELIMITER ;

-- -----------------------------------------------------
-- Counts amount of ladder squares landed on in a game.
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS ladder_count_landed_in_game;

DELIMITER ££
CREATE FUNCTION ladder_count_landed_in_game (gameChoice INT)
RETURNS INT NOT DETERMINISTIC

BEGIN

	DECLARE ladderCount INT;
    SET ladderCount = (SELECT COUNT(*) FROM Moves
					WHERE game_gameID = gameChoice
                    AND landedOnLadder = 1);
                    
	RETURN ladderCount;
			
END ££
DELIMITER ;


-- -----------------------------------------------------
-- Counts amount of ladder squares landed on in a game.
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS boost_count_landed_in_game;

DELIMITER ££
CREATE FUNCTION boost_count_landed_in_game (gameChoice INT)
RETURNS INT NOT DETERMINISTIC

BEGIN

	DECLARE boostCount INT;
    SET boostCount = (SELECT COUNT(*) FROM Moves
					WHERE game_gameID = gameChoice
                    AND landedOnBoost = 1);
                    
	RETURN boostCount;
			
END ££
DELIMITER ;

-- -----------------------------------------------------
-- Finds longest total moves taken in a game.
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS find_longest_game;

DELIMITER ££
CREATE FUNCTION find_longest_game()
RETURNS INT NOT DETERMINISTIC

BEGIN
	DECLARE longestGame INT;
    SET longestGame = (SELECT COUNT(*) FROM moves
						GROUP BY game_gameID
                        ORDER BY COUNT(*) DESC LIMIT 1);
	
    RETURN longestGame;

END ££
DELIMITER ;

-- -----------------------------------------------------
-- Finds lowest total moves taken in a game.
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS find_shortest_game;

DELIMITER ££
CREATE FUNCTION find_shortest_game()
RETURNS INT NOT DETERMINISTIC

BEGIN
	DECLARE shortestGame INT;
    SET shortestGame = (SELECT COUNT(*) FROM moves
						GROUP BY game_gameID
                        ORDER BY COUNT(*) ASC LIMIT 1);
	
    RETURN shortestGame;

END ££
DELIMITER ;

-- -----------------------------------------------------
-- Find player with highest win count.
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS find_highest_win_player;

DELIMITER ££
CREATE FUNCTION find_highest_win_player()
RETURNS VARCHAR(45) NOT DETERMINISTIC

BEGIN
	DECLARE highestWinPlayer VARCHAR(45);
    SET highestWinPlayer = (SELECT playerName FROM playerList
						ORDER BY playerWinCount DESC LIMIT 1);
	
    RETURN highestWinPlayer;
                       
                   
	
END ££

DELIMITER ;

-- -----------------------------------------------------
-- Find player with lowest win count.
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS find_lowest_win_player;

DELIMITER ££
CREATE FUNCTION find_lowest_win_player()
RETURNS VARCHAR(45) NOT DETERMINISTIC

BEGIN
	DECLARE lowestWinPlayer VARCHAR(45);
    SET lowestWinPlayer = (SELECT playerName FROM playerList
						ORDER BY playerWinCount ASC LIMIT 1);
	
    RETURN lowestWinPlayer;
                       
                   
	
END ££

DELIMITER ;

-- -----------------------------------------------------
-- Find player with highest total moves.
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS find_most_player_moves;

DELIMITER ££
CREATE FUNCTION find_most_player_moves()
RETURNS VARCHAR(45) NOT DETERMINISTIC

BEGIN
	DECLARE mostTravelledPlayer VARCHAR(45);
    DECLARE finalResult VARCHAR(45);
    SET mostTravelledPlayer = (SELECT playerName FROM playerList
						ORDER BY playerTotalMovesMade DESC LIMIT 1);
	
    SET finalResult = CONCAT(mostTravelledPlayer, ' (', (SELECT playerTotalMovesMade FROM playerList
						ORDER BY playerTotalMovesMade DESC LIMIT 1), ')');
    
    RETURN finalResult;
                       
                   
END ££

DELIMITER ;

-- -----------------------------------------------------
-- Find average total moves per game.
-- -----------------------------------------------------
DROP FUNCTION IF EXISTS average_moves_per_game;

DELIMITER ££
CREATE FUNCTION average_moves_per_game()
RETURNS DECIMAL (4, 2) NOT DETERMINISTIC

BEGIN

	DECLARE totalGameMoves INT;         
    DECLARE totalGames INT;
    DECLARE averageMovesPerGame DECIMAL (4, 2);
    SET totalGameMoves = (SELECT COUNT(*) FROM moves);
    SET totalGames = (SELECT COUNT(*) FROM game);
    SET averageMovesPerGame = totalGameMoves / totalGames;
    
    RETURN averageMovesPerGame;
    

END ££

DELIMITER ;
-- -----------------------------------------------------
-- Find average moves during game for specific player.
-- -----------------------------------------------------
DROP FUNCTION IF EXISTS average_player_moves_per_game;

DELIMITER ££
CREATE FUNCTION average_player_moves_per_game(playerChoice INT)
RETURNS DECIMAL (4, 2) NOT DETERMINISTIC

BEGIN
	DECLARE totalPlayerMoves INT;
    DECLARE totalGameInvolvement INT;
    DECLARE averagePlayerGameMoves DECIMAL (4, 2);
    
    SET totalPlayerMoves = (SELECT COUNT(*) FROM moves m
							INNER JOIN players p ON m.players_playerID = p.playerID
                            WHERE p.pl_PlayerListID = playerChoice);
--     WHERE pl_PlayerListID = playerChoice));
    
    SET totalGameInvolvement = (SELECT COUNT(game_gameID) FROM players
							WHERE pl_playerListID = playerChoice); 
	
    SET averagePlayerGameMoves = totalPlayerMoves / totalGameInvolvement;
    
    RETURN averagePlayerGameMoves;

END ££

DELIMITER ;

-- -----------------------------------------------------
-- sources best player move average (lowest)
-- -----------------------------------------------------

DROP FUNCTION IF EXISTS best_player_move_average;
DELIMITER //
CREATE FUNCTION best_player_move_average()
RETURNS VARCHAR(45) NOT DETERMINISTIC
BEGIN

	DECLARE totalPlayerIDS INT DEFAULT 0;
	DECLARE counter INT;
	DECLARE playerGamesInvolved INT;
    DECLARE finalResult VARCHAR(45);

	SELECT COUNT(*) FROM playerList INTO totalPlayerIDS;
	SET counter = 1;
	WHILE counter < totalPlayerIDS + 1 DO
		
		SET playerGamesInvolved = (SELECT COUNT(*) FROM players WHERE pl_playerListID = counter);
		IF playerGamesInvolved > 0 THEN
			UPDATE playerList
				SET playerAverageGameMoves = playerTotalMovesMade /  playerGamesInvolved WHERE playerListID = counter;
				
		ELSE
			UPDATE playerList
				SET playerAverageGameMoves = 0 WHERE playerListID = counter;
		END IF;
		SET counter = counter + 1;
		
	END WHILE;

	SET @bestPlayer = (SELECT playerName FROM playerList WHERE NOT playerAverageGameMoves  = 0
					ORDER BY playerAverageGameMoves ASC LIMIT 1);
	
    -- Code adapted from nickf - How to concat datatypes like integers(integer with integer) & varchar(varchar with varchar) in mysql?
    -- Available at: https://stackoverflow.com/questions/2479012/how-to-concat-datatypes-like-integersinteger-with-integer-varcharvarchar-wi
	SET finalResult = CONCAT(@bestPlayer,' (',  (SELECT playerAverageGameMoves FROM playerList WHERE NOT playerAverageGameMoves  = 0
					ORDER BY playerAverageGameMoves ASC LIMIT 1), ')');
					
	RETURN finalResult;
	

END //
DELIMITER ;


-- ----------------------------------------------------------------------------------
--
--
-- GAME PROCEDURES
-- 
--
-- ----------------------------------------------------------------------------------


-- -----------------------------------------------------
-- Procedure passes in new Player data from call into table. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS add_new_player;

DELIMITER //
CREATE PROCEDURE add_new_player (IN newPlayerEntry VARCHAR(45))
BEGIN
	INSERT INTO PlayerList(playerName)
	VALUES (newPlayerEntry);
END //
DELIMITER ;


-- -----------------------------------------------------
-- Procedure adds a new blank game state. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS add_new_game;

DELIMITER //
CREATE PROCEDURE add_new_game(IN chosenBoardSize INT, IN chosenDice INT)
BEGIN

	INSERT INTO Game(boardSize,boardGridSize, dice_diceID)
    VALUES(chosenBoardSize*chosenBoardSize,chosenBoardSize, chosenDice);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure adds new player to a blank game state.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS add_new_player_to_game;
DELIMITER //
CREATE PROCEDURE add_new_player_to_game(IN playerColourChoice VARCHAR(45), IN gameStateChoice INT, IN savedPlayerChoice INT)
BEGIN
	INSERT INTO players(playerColour, game_gameID, pl_PlayerListID)
    VALUES(playerColourChoice, gameStateChoice, savedPlayerChoice);

END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure passes in new Dice from call into table.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS add_new_dice;

DELIMITER //
CREATE PROCEDURE add_new_dice(IN newDiceCount INT, IN newDiceFaces INT)
BEGIN

	DECLARE incorrectDiceEntry CONDITION FOR 1357;
    
    DECLARE CONTINUE HANDLER FOR incorrectDiceEntry
	SELECT 'INCORRECT dice choice made for new game.';

	INSERT INTO Dice (diceCount, diceFaces)
    VALUES (newDiceCount, newDiceFaces);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure passes in snake data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS add_new_snake;

DELIMITER //
CREATE PROCEDURE add_new_snake(IN newSnakeHead INT, IN newSnakeTail INT, IN gameChoice INT)
BEGIN

	INSERT INTO Snakes(snakeHead, snakeTail, Game_gameID)
	VALUES (newSnakeHead, newSnakeTail, gameChoice);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure passes in Ladder data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS add_new_ladder;

DELIMITER //
CREATE PROCEDURE add_new_ladder(IN newLadderFoot INT, IN newLadderTop INT, IN gameChoice INT)
BEGIN
    
	INSERT INTO Ladders(ladderFoot, ladderTop, Game_gameID)
	VALUES (newLadderFoot, newLadderTop, gameChoice);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure passes in Boost data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS add_new_boost;

DELIMITER //
CREATE PROCEDURE add_new_boost (IN boostLocation int, IN gameChoice INT)
BEGIN

	INSERT INTO Boosts(boostLocation, Game_gameID)
	VALUES (boostLocation, gameChoice);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure saves a player's move during turn into table.
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS add_player_move;

DELIMITER //
CREATE PROCEDURE add_player_move(IN playerTurnStart INT, IN playerTurnEnd INT, IN currentPlayer INT, IN currentGame INT)
BEGIN
	INSERT INTO Moves (moveStart, moveEnd, players_playerID, game_gameID)
    VALUES (playerTurnStart, playerTurnEnd, currentPlayer, currentGame);

END //
DELIMITER ;


-- -----------------------------------------------------
-- grabs game based on ID choice .
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS select_game;

DELIMITER ££
CREATE PROCEDURE select_game (gameChoice INT, OUT gameNumber INT)
BEGIN

SELECT * FROM Game WHERE gameID = gameChoice;

SELECT gameID INTO gameNumber
FROM Game
where gameID = gameChoice;

END ££
DELIMITER ;

-- -----------------------------------------------------
-- grabs player data based on current game choice.
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS select_players_from_game;

DELIMITER //

CREATE PROCEDURE select_players_from_game(IN currentgame INT)
BEGIN
	SELECT 
    playerColour,  
    playerPosition, 
    playerMovesTaken
    FROM players
    WHERE game_gameID = currentGame;
END //
DELIMITER ;

-- -----------------------------------------------------
-- grabs dice choice based on current game choice.
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS select_dice_choice_from_game;

DELIMITER //

CREATE PROCEDURE select_dice_choice_from_game(IN currentgame INT)
BEGIN
	SELECT diceID, diceCount, diceFaces 
    FROM dice d
    INNER JOIN game g ON d.diceID = g.dice_diceID
    WHERE g.gameID = currentGame;
END //
DELIMITER ;

-- -----------------------------------------------------
-- grabs all snakes from current game choice.
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS select_game_snakes;

DELIMITER //

CREATE PROCEDURE select_game_snakes(IN currentgame INT)
BEGIN
	SELECT * 
    FROM snakes
    WHERE game_gameID = currentGame;
END //
DELIMITER ;

-- -----------------------------------------------------
-- grabs all ladders from current game choice.
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS select_game_ladders;

DELIMITER //

CREATE PROCEDURE select_game_ladders(IN currentgame INT)
BEGIN
	SELECT * 
    FROM ladders
    WHERE game_gameID = currentGame;
END //
DELIMITER ;

-- -----------------------------------------------------
-- grabs all boosts from current game choice.
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS select_game_boosts;

DELIMITER //
CREATE PROCEDURE select_game_boosts(IN currentgame INT)
BEGIN
	SELECT * 
    FROM boosts
    WHERE game_gameID = currentGame;
END //
DELIMITER ;


-- ----------------------------------------------------------------------------------
--
--
-- GAME TRIGGERS
-- 
--
-- ----------------------------------------------------------------------------------

-- -----------------------------------------------------
-- Trigger calculates diceroll into table before entry of player's positions on turn.
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS calculate_move_roll_from_entries;

DELIMITER ??
CREATE TRIGGER calculate_move_roll_from_entries BEFORE INSERT
ON Moves
FOR EACH ROW

BEGIN 
	SET new.moveRoll = (new.moveEnd - new.moveStart);

END ??
DELIMITER ;
-- -----------------------------------------------------
-- Trigger increments a player's personal & assigned game's total roll counts upon entering a new move into Moves table..
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS append_player_moves_made_total;

DELIMITER ??
CREATE TRIGGER append_player_moves_made_total AFTER INSERT
ON Moves
FOR EACH ROW

BEGIN
	-- Update's player's personal stats page.
	UPDATE PlayerList 
	SET playerTotalMovesMade = playerTotalMovesMade + 1
	WHERE playerListID = (SELECT pl_PlayerListID FROM players p 
						WHERE p.playerID = (SELECT players_playerID FROM Moves
						ORDER BY moveID DESC Limit 1));
	
    -- Updates the same player's stats on the game itself.
	UPDATE Players
    SET playerMovesTaken = playerMovesTaken + 1
    WHERE (playerID = (SELECT players_playerID FROM moves
						ORDER BY moveID DESC LIMIT 1)
	AND game_gameID = (SELECT game_gameID FROM moves
						ORDER BY moveID DESC LIMIT 1));
						
END ??
DELIMITER ;

-- -----------------------------------------------------
-- Trigger a move's final roll position to the specific player for current record purpose.
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS assign_move_end_position_to_player_on_players_table;

DELIMITER ??
CREATE TRIGGER assign_move_end_position_to_player_on_players_table AFTER INSERT
ON Moves
FOR EACH ROW

BEGIN

	DECLARE playerRollEnd INT;
    
    SET playerRollEnd = (SELECT moveEnd FROM Moves
	ORDER BY moveID DESC LIMIT 1);

	UPDATE Players
	SET playerPosition = playerRollEnd WHERE playerID = (SELECT players_playerID FROM Moves
		ORDER BY moveID DESC LIMIT 1);

END ??
DELIMITER ;

-- -----------------------------------------------------
-- Trigger notes whether player's roll triggered a special square (snake/ladder/boost) and assigns dedicated value tracker to true if so.
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS assert_if_player_lands_on_special_square;

DELIMITER ??
CREATE TRIGGER assert_if_player_lands_on_special_square BEFORE INSERT
ON Moves
FOR EACH ROW

BEGIN

	SET @moveEndPosition = new.moveStart + new.moveRoll;
	
    IF @moveEndPosition IN (SELECT snakeHead FROM snakes) 
    THEN SET new.landedOnSnake = 1;
	END IF;
        
    IF @moveEndPosition IN (SELECT ladderFoot FROM Ladders) 
    THEN SET new.landedOnLadder = 1;
	END IF;
    
    IF @moveEndPosition IN (SELECT boostLocation FROM Boosts) 
    THEN SET new.landedOnBoost = 1;    
	END IF;

END ??
DELIMITER ;

-- -----------------------------------------------------
-- Trigger marks if player won game during turn. Increments player, playerList and marks Game as complete.
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS confirm_if_player_has_won_game;

DELIMITER ??
CREATE TRIGGER confirm_if_player_has_won_game AFTER INSERT
ON Moves
FOR EACH ROW
	
BEGIN
	SET @moveEndPosition = new.moveStart + new.moveRoll;
    SET @winningSquareOnly = (SELECT winningSquareOnlyFeature FROM game
    WHERE gameID = (SELECT game_gameID FROM moves
    ORDER BY moveID DESC LIMIT 1));
    
    -- checks if move's final position is over game's board size AND if winning square is turned off.
    IF @moveEndPosition > (SELECT boardSize FROM game
		WHERE gameID = (SELECT game_gameID FROM moves
			ORDER BY moveID DESC LIMIT 1)) AND @winningSquareOnly = false

		
	THEN 
		CALL update_database_wins();
	
    ELSEIF @moveEndPosition = (SELECT boardSize FROM game
		WHERE gameID = (SELECT game_gameID FROM moves
			ORDER BY moveID DESC LIMIT 1)) 
            
	THEN
		CALL update_database_wins();
		
        END IF;
    
END ??
DELIMITER ;

DROP PROCEDURE IF EXISTS update_database_wins;

DELIMITER //
CREATE PROCEDURE update_database_wins()
BEGIN
	UPDATE Players
	SET playerWonGame = players.playerWonGame + 1 WHERE playerID = 
		(SELECT players_playerID FROM moves
	ORDER BY moveID DESC LIMIT 1);
	
	UPDATE Game
		SET gameHasEnded = 1 WHERE gameID = 
			(SELECT game_gameID FROM Players WHERE playerWonGame = 1 AND playerID =
					(SELECT players_playerID FROM moves ORDER BY moveID DESC LIMIT 1));
		
	UPDATE playerList
		SET playerList.playerWinCount = playerList.playerWinCount + 1 WHERE playerListID = 
			(SELECT pl_playerListID FROM players p WHERE playerWonGame = 1 AND playerID = 
				(SELECT players_playerID FROM moves ORDER by moveID DESC LIMIT 1));
END //
DELIMITER ;
-- -----------------------------------------------------
-- Trigger increments game turn when move entry made.
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS increment_game_turn_count;

DELIMITER ??
CREATE TRIGGER increment_game_turn_count AFTER INSERT
ON Moves
FOR EACH ROW

BEGIN

	UPDATE game
	SET gamePlayerTurn = gamePlayerTurn + 1
	 WHERE gameID = (SELECT game_gameID FROM moves	
					ORDER BY moveID DESC LIMIT 1);
						

END ??
DELIMITER ;

-- -----------------------------------------------------
-- Trigger increments game round when turns reach player count. game turns reset to 1.
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS increment_new_game_round;

DELIMITER ??
CREATE TRIGGER increment_new_game_round AFTER INSERT
ON Moves
FOR EACH ROW

BEGIN

	SET @currentGame = (SELECT game_gameID FROM moves ORDER BY moveID DESC LIMIT 1);
	SET @currentTurn = (SELECT gamePlayerTurn FROM game WHERE gameID = @currentGame);
	SET @currentPlayers = (SELECT COUNT(*) FROM players WHERE game_gameID = @currentGame);
                    
	IF @currentTurn = @currentPlayers + 1
	THEN
	UPDATE Game
		SET gameRound = gameRound + 1, gamePlayerTurn = 1 WHERE gameID = @currentGame;

	END IF;
						

END ??
DELIMITER ;


-- ----------------------------------------------------------------------------------
--
--
-- DUMMY DATA
-- 
--
-- ----------------------------------------------------------------------------------

DROP PROCEDURE IF EXISTS insert_dummy_data;

DELIMITER !!
CREATE PROCEDURE insert_dummy_data() 
BEGIN
INSERT INTO dice (diceCount, diceFaces) VALUES (1, 6);
INSERT INTO dice (diceCount, diceFaces) VALUES (2, 6);
INSERT INTO dice (diceCount, diceFaces) VALUES (1, 10);



insert into Game(boardGridSize, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
values ( 5, false, false, 1);
insert into Game(boardGridSize, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
values (6,  true, false, 1);
insert into Game(boardSize, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
values (10,  true, true, 2);

CALL add_new_game(50, 1);

CALL add_new_snake (16,8, 1);
CALL add_new_snake (18,8, 2);
CALL add_new_snake (22,8, 3);

CALL add_new_snake (7, 3, 1);
CALL add_new_snake (9, 3, 2);
CALL add_new_snake (11, 3, 3);

CALL add_new_ladder(4, 13, 1);
CALL add_new_ladder(5, 13, 2);
CALL add_new_ladder(6, 13, 3);

CALL add_new_ladder (14, 21, 1);
CALL add_new_ladder (15, 21, 2);
CALL add_new_ladder (17, 21, 3);

CALL add_new_boost(2, 1);
CALL add_new_boost (14, 2);
CALL add_new_boost (18, 3);
CALL add_new_boost (10, 1);
CALL add_new_boost (11, 2);
CALL add_new_boost (19, 3);

INSERT INTO PlayerList(playerName, playerWinCount) VALUES ("Fred", 2);
INSERT INTO PlayerList(playerName, playerWinCount) VALUES ("Sally", 1);
INSERT INTO PlayerList(playerName, playerWinCount) VALUES ("Burt", 4);
INSERT INTO PlayerList(playerName, playerWinCount) VALUES ("Wendy", 5);

CALL add_new_player("Bill");

CALL add_new_player_to_game('RED', 1, 1);
CALL add_new_player_to_game('BLUE', 1, 2);
CALL add_new_player_to_game('YELLOW', 1, 3);
CALL add_new_player_to_game('RED', 2, 1);
CALL add_new_player_to_game('BLUE', 2, 3);
CALL add_new_player_to_game('RED', 3, 4);
CALL add_new_player_to_game('BLUE', 3, 3);
CALL add_new_player_to_game('RED', 4, 1);
CALL add_new_player_to_game('BLUE', 4, 3);


CALL add_player_move(0, 4, 1, 1);
CALL add_player_move(0, 5, 2, 1);
CALL add_player_move(0, 7, 3, 1);
CALL add_player_move(4, 10, 1, 1);
CALL add_player_move(5, 11, 2, 1);
CALL add_player_move(7, 11, 3, 1);
CALL add_player_move(10, 16, 1, 1);
CALL add_player_move(11, 14, 2, 1);
CALL add_player_move(11,17, 3, 1);
CALL add_player_move(16,19, 1, 1);

CALL add_player_move(0, 12, 4, 2);
CALL add_player_move(0, 7, 5, 2);
CALL add_player_move(12, 14, 4, 2);
CALL add_player_move(7, 15, 5, 2);
CALL add_player_move(14, 18, 4, 2);

CALL add_player_move(10, 15, 6, 3);
CALL add_player_move(10, 15, 7, 3);
CALL add_player_move(10, 100, 6, 3);

CALL add_player_move(0, 6, 8, 4);
CALL add_player_move(0, 5, 9, 4);
CALL add_player_move(6, 17, 8, 4);
CALL add_player_move(5, 12, 9, 4);
CALL add_player_move(17, 18, 8, 4);
CALL add_player_move(12, 50, 9, 4);

END !!

DELIMITER ;


-- ----------------------------------------------------------------------------------
--
--
--  SCRIPT & PROCEDURE TESTS
--
--
-- ----------------------------------------------------------------------------------
DROP PROCEDURE IF EXISTS test;

DELIMITER !!
CREATE PROCEDURE test()
BEGIN
	CALL insert_dummy_data;

	CALL select_game(1, @gameChoice);
	CALL select_players_from_game(@gameChoice); 
	CALL select_dice_choice_from_game(@gameChoice);

	CALL select_game_snakes(@gameChoice);
	CALL select_game_ladders(@gameChoice);
	CALL select_game_boosts(@gameChoice);
    
    SET @snakeResult = snake_count_landed_in_game(@gameChoice);
	SET @ladderResult = ladder_count_landed_in_game(@gameChoice);
	SET @boostResult = boost_count_landed_in_game(@gameChoice);

	SELECT @snakeResult AS 'Snakes hit in game 1', @ladderResult AS 'Ladders hit in game 1', @boostResult AS 'Boosts hit in game 1';

	SET @longestGame = find_longest_game();
	SET @shortestGame = find_shortest_game();
	SELECT @shortestGame AS 'Shortest Game (turns)',  @longestGame AS 'Longest Game (turns)';

	SET @highestGameWins = find_highest_win_player();
	SET @lowestGameWins = find_lowest_win_player();
	SELECT @highestGameWins AS 'Highest Win Count', @lowestGameWins AS 'Lowest Win Count';

	SET @averageGameMoves = average_moves_per_game();
	SET @averagePlayerMoves1 = average_player_moves_per_game(1);
	SET @averagePlayerMoves2 = average_player_moves_per_game(3);
	SET @highestMoveCount = find_most_player_moves();
	SET @highestMoveAverage = best_player_move_average();

	SELECT @averageGameMoves AS 'Average Game Moves', @averagePlayerMoves1 AS 'Average moves made by player 1', @averagePlayerMoves2 AS 'Average moves made by player 3', @HighestMoveCount AS 'Highest Player Move Count',
	@highestMoveAverage AS 'Best Move Average' ;

END !!
DELIMITER ;

CALL test();

SELECT * FROM game;

call select_dice_choice_from_game(1);

call select_game_snakes(1);
call select_game_ladders(2);
call select_game_boosts(1);
call select_players_from_game(1);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

