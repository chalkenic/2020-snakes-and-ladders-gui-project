-- MySQL Script generated by MySQL Workbench
-- Tue Apr 21 15:53:55 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema snakesAndLaddersData
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema snakesAndLaddersData
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `snakesAndLaddersData`;
CREATE SCHEMA IF NOT EXISTS `snakesAndLaddersData` DEFAULT CHARACTER SET utf8 ;
USE `snakesAndLaddersData` ;


-- ----------------------------------------------------------------------------------
--
--
-- TABLE CREATIONS
-- 
--
-- ----------------------------------------------------------------------------------

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Dice`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Dice` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Dice` (
  `diceID` INTEGER NOT NULL AUTO_INCREMENT,
  `diceCount` INT NOT NULL,
  `diceFaces` INT NOT NULL,
  PRIMARY KEY (`DiceID`))
ENGINE = InnoDB;


INSERT INTO Dice (diceCount, diceFaces) VALUES (1, 6);

select * from Dice;


-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Game`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Game` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Game` (
  `gameID` INT NOT NULL AUTO_INCREMENT,
  `gameRound` INT NOT NULL DEFAULT 0,
  `boardSize` INT NOT NULL,
--   `winningSquare` INT NULL,
  `gameHasEnded` TINYINT NULL DEFAULT false,
  `boostSquareFeature` TINYINT NULL DEFAULT false,
  `winningSquareOnlyFeature` TINYINT NULL DEFAULT false,
  `dice_diceID` INT NOT NULL,
  PRIMARY KEY (`gameID`),
    FOREIGN KEY (`dice_diceID`)
    REFERENCES `snakesAndLaddersData`.`Dice` (`diceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`GameStatistics`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS `snakesAndLaddersData`.`GameStatistics` ;

-- CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`GameStatistics` (
--   `gameStatisticID` INT NOT NULL AUTO_INCREMENT,
--   `gamePlayerCount` INT NOT NULL,
--   `gameTotalMovesMade` INT NOT NULL,
--   `gameSnakesHit` INT NULL DEFAULT 0,
--   `gameLaddersHit` INT NULL DEFAULT 0,
--   `gameBoostsHit` INT NULL DEFAULT 0,
--   `gameWinningPlayer` VARCHAR(45),
--   `Game_gameID` INT NOT NULL,
--   PRIMARY KEY (`gameStatisticID`),
-- 	FOREIGN KEY (`Game_gameID`)
--     REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
--     ON DELETE NO ACTION
--     ON UPDATE NO ACTION)
-- ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Players`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`players` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`players` (
  `playerID` INT NOT NULL AUTO_INCREMENT,
  -- `playerName` VARCHAR(45),
  `playerColour` VARCHAR(45) NOT NULL,
  `playerPosition` INT DEFAULT 0,
  `playerMovesTaken` INT DEFAULT 0,
  `playerWonGame` TINYINT DEFAULT false,
  `game_gameID` INT NOT NULL,
  `pl_PlayerListID`INT NOT NULL,
  PRIMARY KEY (`playerID`),
    FOREIGN KEY (`game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`),
    FOREIGN KEY (`pl_PlayerListID`)
    REFERENCES `snakesAndLaddersData`.`PlayerList` (PlayerListID)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`PlayerList`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`PlayerList` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`PlayerList` (
	`PlayerListID` INT NOT NULL AUTO_INCREMENT,
    `playerName` VARCHAR(45),
    `playerWinCount` INT DEFAULT 0,
    `playerTotalMovesMade` INT DEFAULT 0,
    `playerAverageGameMoves` INT,
    PRIMARY KEY (`PlayerListID`))
ENGINE = InnoDB;
        
-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Snakes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Snakes` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Snakes` (
  `snakeID` INT NOT NULL AUTO_INCREMENT,
  `snakeHead` INT NOT NULL,
  `snakeTail` INT NOT NULL,
  `game_gameID` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`snakeID`),
    FOREIGN KEY (`game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Ladders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Ladders` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Ladders` (
  `ladderID` INT NOT NULL AUTO_INCREMENT,
  `ladderFoot` INT NOT NULL,
  `ladderTop` INT NOT NULL,
  `game_gameID` INT NOT NULL,
  PRIMARY KEY (`ladderID`),
    FOREIGN KEY (`game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Boosts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Boosts` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Boosts` (
  `boostID` INT NOT NULL AUTO_INCREMENT,
  `boostLocation` INT NOT NULL,
  `game_gameID` INT NOT NULL,
  PRIMARY KEY (`boostID`),
    FOREIGN KEY (`Game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Moves`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Moves` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Moves` (
  `moveID` INT NOT NULL AUTO_INCREMENT,
  `moveStart` INT NOT NULL,
  `moveEnd` INT NOT NULL,
  `moveRoll` INT,
  `landedOnSnake` TINYINT,
  `landedOnLadder`TINYINT,
  `landedOnBoost`TINYINT,
  `players_playerID` INT NOT NULL,
  `game_gameID` INT NOT NULL,
  PRIMARY KEY (`moveID`),
    FOREIGN KEY (`players_playerID`)
    REFERENCES `snakesAndLaddersData`.`players` (`playerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    FOREIGN KEY (`game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;



-- ----------------------------------------------------------------------------------
--
--
-- GAME FUNCTIONS
-- 
--
-- ----------------------------------------------------------------------------------






-- -----------------------------------------------------
-- Finds total mvoes taken in a game.
-- -----------------------------------------------------
-- DROP FUNCTION IF EXISTS CalculateTotalFunctions;


-- DELIMITER ££
-- CREATE FUNCTION  CalculateTotalMovesMade( queriedGame INT) RETURNS INT NOT DETERMINISTIC
-- BEGIN
-- 	DECLARE totalGames INT;
-- 	SELECT DISTINCT COUNT(*) FROM Game AS totalGames;
--     
--     

-- END ££

-- DELIMITER ;


-- ----------------------------------------------------------------------------------
--
--
-- GAME PROCEDURES
-- 
--
-- ----------------------------------------------------------------------------------

-- -----------------------------------------------------
-- Procedure passes in new Player data from call into table. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS addNewPlayer;

DELIMITER //
CREATE PROCEDURE addNewPlayer (IN newPlayerEntry VARCHAR(45))
BEGIN
	INSERT INTO PlayerList(playerName)
	VALUES (newPlayerEntry);
END //
DELIMITER ;


-- -----------------------------------------------------
-- Procedure adds a new blank game state. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS addNewGame;

DELIMITER //
CREATE PROCEDURE addNewGame(IN chosenBoardSize INT, IN chosenDice INT)
BEGIN
	INSERT INTO Game(boardSize, dice_diceID)
    VALUES(chosenBoardSize, chosenDice);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure adds new player to a blank game state.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS addNewPlayerToGame;
DELIMITER //
CREATE PROCEDURE addNewPlayerToGame(IN playerColourChoice VARCHAR(45), IN gameStateChoice INT, IN savedPlayerChoice INT)
BEGIN
	INSERT INTO players(playerColour, game_gameID, pl_PlayerListID)
    VALUES(playerColourChoice, gameStateChoice, savedPlayerChoice);

END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure passes in new Dice from call into table.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS addNewDice;

DELIMITER //
CREATE PROCEDURE addNewDice(IN newDiceCount INT, IN newDiceFaces INT)
BEGIN
	INSERT INTO Dice (diceCount, diceFaces)
    VALUES (newDiceCount, newDiceFaces);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure passes in snake data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS addNewSnake;

DELIMITER //
CREATE PROCEDURE addNewSnake(IN newSnakeHead int, IN newSnakeTail int)
BEGIN

	DECLARE snakeGameID INT;
    SELECT MAX(GameID) INTO snakeGameID from Game;

	INSERT INTO Snakes(snakeHead, snakeTail, Game_gameID)
	VALUES (newSnakeHead, newSnakeTail, snakeGameID);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure passes in Ladder data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS addNewLadder;

DELIMITER //
CREATE PROCEDURE addNewLadder(IN newLadderFoot int, IN newLadderTop int)
BEGIN

	DECLARE ladderGameID INT;
    SELECT MAX(GameID) INTO ladderGameID from Game;
    
	INSERT INTO Ladders(ladderFoot, ladderTop, Game_gameID)
	VALUES (newLadderFoot, newLadderTop, ladderGameID);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure passes in Boost data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS addNewBoost;

DELIMITER //
CREATE PROCEDURE addNewBoost (IN boostLocation int)
BEGIN

	DECLARE boostGameID INT;
    SELECT MAX(GameID) INTO boostGameID from Game;

	INSERT INTO Boosts(boostLocation, Game_gameID)
	VALUES (boostLocation, boostGameID);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Procedure saves a player's move during turn into table.
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS addPlayerMove;

DELIMITER //
CREATE PROCEDURE addPlayerMove (IN playerTurnStart INT, IN playerTurnEnd INT, IN currentPlayer INT, IN currentGame INT)
BEGIN
	INSERT INTO Moves (moveStart, moveEnd, players_playerID, game_gameID)
    VALUES (playerTurnStart, playerTurnEnd, currentPlayer, currentGame);

END //
DELIMITER ;


-- -----------------------------------------------------
-- Choose game based on ID choice .
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS selectGame;

DELIMITER ££
CREATE PROCEDURE selectGame (gameChoice INT, OUT gameNumber INT)
BEGIN

SELECT * FROM Game WHERE gameID = gameChoice;

SELECT gameID INTO gameNumber
FROM Game
where gameID = gameChoice;

END ££
DELIMITER ;

-- -----------------------------------------------------
-- grabs player data based on current game choice.
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS selectPlayersFromGame;

DELIMITER //

CREATE PROCEDURE selectPlayersFromGame(IN currentgame INT)
BEGIN
	SELECT * 
    FROM players
    WHERE game_gameID = currentGame;
END //
DELIMITER ;

-- ----------------------------------------------------------------------------------
--
--
-- GAME TRIGGERS
-- 
--
-- ----------------------------------------------------------------------------------

-- -----------------------------------------------------
-- Trigger calculates diceroll into table upon entry of player's positions on turn.
-- -----------------------------------------------------

DELIMITER ??

CREATE TRIGGER calcMoveRoll AFTER INSERT
ON Moves
FOR EACH ROW

BEGIN
	UPDATE calcMoveRoll 
	SET moveRoll = (moveEnd - moveStart)
	ORDER BY moveID DESC
	LIMIT 1;
END ??

DELIMITER ;

-- -----------------------------------------------------
-- Trigger increments a player's personal total roll count upon entering a new move.
-- -----------------------------------------------------

DELIMITER ??

CREATE TRIGGER appendPlayerRollTotal AFTER INSERT
ON Moves
FOR EACH ROW

BEGIN

UPDATE PlayerList 
SET PlayerList.playerTotalMovesMade = playerTotalMovesMade + 1
WHERE PlayerList.playerListID = (SELECT MAX(Moves.players_playerID)) 
LIMIT 1;
END ??

DELIMITER ;


-- DELIMITER ??

-- CREATE TRIGGER appendGameStatistics AFTER UPDATE
-- ON Players.playerMovesTaken
-- FOR EACH ROW WHERE ;
-- BEGIN
-- 	
-- 	
-- -- 	DECLARE isTurnCountZero INT;

-- -- 	SELECT playerMovesTotal
-- --     INTO isTurnCountZero
-- --     FROM PlayerList.playerAverageGameMoves;
-- --     
-- --     IF 

-- -- 	UPDATE PlayerList.playerAverageGameMoves

-- END ??

-- DELIMITER ;

-- ----------------------------------------------------------------------------------
--
--
-- SCRIPT & PROCEDURE TESTS
-- 
--
-- ----------------------------------------------------------------------------------

-- -----------------------------------------------------
-- #1 AddNewSnake TEST. Adds new snakes & current game ID to ensure data being added correctly.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS addSnakeTest;

DELIMITER &&
CREATE PROCEDURE addSnakeTest()
BEGIN

	insert into Game(gameRound, boardSize,  gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
	values (0, 50,  false, false, false, 1);

	CALL addNewSnake (16,8);
    

	insert into Game(gameRound, boardSize,  gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
	values (0, 25,  false, false, false, 1);

	CALL addNewSnake (19,12);
	SELECT * FROM Snakes;

	DELETE FROM Snakes WHERE snakeID = 
		(SELECT MAX(snakeID) FROM Snakes);
    DELETE FROM Snakes WHERE snakeID = 
		(SELECT MAX(snakeID) FROM Snakes);
	DELETE FROM Game WHERE gameID = 
        (SELECT MAX(gameID)FROM Game);
	DELETE FROM Game WHERE gameID = 
		(SELECT MAX(gameID)FROM Game);
    
END &&
DELIMITER ;



-- -----------------------------------------------------
-- #2 AddNewBoost TEST. Adds new ladders & current game ID to ensure data being added correctly.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS addLadderTest;

DELIMITER &&
CREATE PROCEDURE addLadderTest()
BEGIN

	insert into Game(gameRound, boardSize, gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
	values (0, 25, false, false, false, 1);

	CALL addNewLadder(9,13);

	insert into Game(gameRound, boardSize, gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
	values (0, 25, false, false, false, 1);

	CALL addNewLadder (4,21);
	SELECT * FROM Ladders;

	DELETE FROM Ladders WHERE ladderID = 
		(SELECT MAX(ladderID) FROM Ladders);
    DELETE FROM Ladders WHERE ladderID = 
		(SELECT MAX(ladderID) FROM Ladders);
	DELETE FROM Game WHERE gameID = 
        (SELECT MAX(gameID)FROM Game);
	DELETE FROM Game WHERE gameID = 
		(SELECT MAX(gameID)FROM Game);
    
END &&
DELIMITER ;



-- -----------------------------------------------------
-- #3 AddNewBoost TEST. Adds new boost square locations & current game ID to ensure data being added correctly.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS AddBoostTest;

DELIMITER &&
CREATE PROCEDURE addBoostTest()
BEGIN

	insert into Game(gameRound, boardSize, gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
	values (0, 25, false, false, false, 1);

	CALL addNewBoost(14);

	insert into Game(gameRound, boardSize, gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
	values (0, 25, false, false, false, 1);

	CALL addNewBoost (19);
	SELECT * FROM Boosts;
	
    -- remove all data from test after confirmation of completion.
	DELETE FROM Boosts WHERE boostID = 
		(SELECT MAX(boostID) FROM Ladders);
    DELETE FROM Boosts WHERE boostID = 
		(SELECT MAX(boostID) FROM Ladders);
	DELETE FROM Game WHERE gameID = 
        (SELECT MAX(gameID)FROM Game);
	DELETE FROM Game WHERE gameID = 
        (SELECT MAX(gameID)FROM Game);
    
END &&
DELIMITER ;





SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- ----------------------------------------------------------------------------------
--
--
-- DUMMY DATA
-- 
--
-- ----------------------------------------------------------------------------------

DROP PROCEDURE IF EXISTS insertDummyData;

DELIMITER !!
CREATE PROCEDURE insertTestDummyData() 
BEGIN
INSERT INTO dice (diceCount, diceFaces) VALUES (1, 6);
INSERT INTO dice (diceCount, diceFaces) VALUES (2, 6);
INSERT INTO dice (diceCount, diceFaces) VALUES (1, 10);

INSERT INTO PlayerList (playerName, playerWinCount, playerAverageGameMoves) VALUES ("Harry", 1, 12); 
INSERT INTO PlayerList (playerName, playerWinCount, playerAverageGameMoves) VALUES ("Sally", 5, 14); 
INSERT INTO PlayerList (playerName, playerWinCount, playerAverageGameMoves) VALUES ("Terry", 3, 9); 


insert into Game(gameRound, boardSize, gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
values (0, 25, false, false, false, 1);
insert into Game(gameRound, boardSize, gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
values (0, 36,  false, true, false, 1);
insert into Game(gameRound, boardSize, gameHasEnded, boostSquarefeature, winningSquareOnlyFeature, Dice_diceID)
values (0, 100, false, true, true, 2);

INSERT INTO players(playerColour, playerPosition, playerMovesTaken, playerWonGame, Game_gameID, PL_PlayerListID) 
VALUES ('ORANGE', 15, 4, false, 5, 1);
INSERT INTO players(playerColour, playerPosition, playerMovesTaken, playerWonGame, Game_gameID, PL_PlayerListID) 
VALUES ('GREEN', 12, 3, false, 5, 3);
INSERT INTO players(playerColour, playerPosition, playerMovesTaken, playerWonGame, Game_gameID, PL_PlayerListID) 
VALUES ('BLUE', 17, 3, false, 5, 2);
INSERT INTO players(playerColour, playerPosition, playerMovesTaken, playerWonGame, Game_gameID, PL_PlayerListID) 
VALUES ('ORANGE', 25, 7, false, 6, 1);
INSERT INTO players(playerColour, playerPosition, playerMovesTaken, playerWonGame, Game_gameID, PL_PlayerListID) 
VALUES ('GREEN', 12, 6, false, 6, 3);
INSERT INTO players(playerColour, playerPosition, playerMovesTaken, playerWonGame, Game_gameID, PL_PlayerListID) 
VALUES ('ORANGE', 62, 9, false, 7, 3);
INSERT INTO players(playerColour, playerPosition, playerMovesTaken, playerWonGame, Game_gameID, PL_PlayerListID) 
VALUES ('GREEN', 53, 9, false, 7, 2);


-- INSERT INTO Moves;

-- INSERT INTO Snakes;

-- INSERT INTO Ladders;

-- INSERT INTO Boosts;

END !!

DELIMITER ;

CALL AddSnakeTest;
CALL addLadderTest;
-- CALL addBoostTest;
CALL insertTestDummyData;

CALL selectGame(5, @gameChoice);

CALL selectPlayersFromGame(@gameChoice); 



