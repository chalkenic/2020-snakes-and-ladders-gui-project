-- MySQL Script generated by MySQL Workbench
-- Tue Apr 21 15:53:55 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema snakesAndLaddersData
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema snakesAndLaddersData
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `snakesAndLaddersData`;
CREATE SCHEMA IF NOT EXISTS `snakesAndLaddersData` DEFAULT CHARACTER SET utf8 ;
USE `snakesAndLaddersData` ;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Dice`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Dice` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Dice` (
  `diceID` INTEGER NOT NULL AUTO_INCREMENT,
  `diceCount` INT NOT NULL,
  `diceFaces` INT NOT NULL,
  PRIMARY KEY (`DiceID`))
ENGINE = InnoDB;


INSERT INTO Dice (diceCount, diceFaces) VALUES (1, 6);

select * from Dice;


-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Game`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Game` ;


CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Game` (
  `gameID` INT NOT NULL AUTO_INCREMENT,
  `gameTurn` INT NOT NULL,
  `boardSize` INT NOT NULL,
  `winningSquare` INT NULL,
  `gameHasEnded` TINYINT NULL,
  `boostSquareFeature` TINYINT NULL,
  `winningSquareFeature` TINYINT NULL,
  `Dice_diceID` INT NOT NULL,
  PRIMARY KEY (`gameID`),
  -- INDEX `fk_Game_Dice1_idx` (`Dice_DiceID` ASC) VISIBLE,
  -- CONSTRAINT `fk_Game_Dice1`
    FOREIGN KEY (`Dice_diceID`)
    REFERENCES `snakesAndLaddersData`.`Dice` (`diceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;



select * from Game;

insert into Game(GameTurn, boardSize, winningSquare, gameHasEnded, boostSquarefeature, winningSquareFeature, Dice_diceID)
values (0, 25, 25, false, false, false, 1);

select * from Game where Dice_diceID = "1";





-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Players`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Players` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Players` (
  `playerID` INT NOT NULL AUTO_INCREMENT,
  `playerName` VARCHAR(45),
  `playerColour` VARCHAR(45) NOT NULL,
  `playerPosition` INT,
  `playerMovesTaken` INT,
  `playerWonGame` TINYINT DEFAULT false,
  `Game_gameID` INT NOT NULL,
  PRIMARY KEY (`playerID`),
  -- INDEX `fk_Players_Game1_idx` (`Game_gameID` ASC) VISIBLE,
  -- CONSTRAINT `fk_Players_Game1`
    FOREIGN KEY (`Game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Snakes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Snakes` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Snakes` (
  `snakeID` INT NOT NULL AUTO_INCREMENT,
  `snakeHead` INT NOT NULL,
  `snakeTail` INT NOT NULL,
  `Game_gameID` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`snakeID`),
  -- INDEX `fk_Snakes_Game1_idx` (`Game_gameID` ASC) VISIBLE,
  -- CONSTRAINT `fk_Snakes_Game1`
    FOREIGN KEY (`Game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Procedure passes in snake data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS AddNewSnake;

DELIMITER //
CREATE PROCEDURE AddNewSnake(IN newSnakeHead int, IN newSnakeTail int)
BEGIN

	DECLARE snakeGameID INT;
    SELECT MAX(GameID) INTO snakeGameID from Game;

	INSERT INTO Snakes(snakeHead, snakeTail, Game_gameID)
	VALUES (newSnakeHead, newSnakeTail, snakeGameID);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Ladders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Ladders` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Ladders` (
  `ladderID` INT NOT NULL AUTO_INCREMENT,
  `ladderFoot` INT NOT NULL,
  `ladderTop` INT NOT NULL,
  `Game_gameID` INT NOT NULL,
  PRIMARY KEY (`ladderID`),
  -- INDEX `fk_Ladders_Game1_idx` (`Game_gameID` ASC) VISIBLE,
  -- CONSTRAINT `fk_Ladders_Game1`
    FOREIGN KEY (`Game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Procedure passes in Ladder data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS AddNewLadder;

DELIMITER //
CREATE PROCEDURE AddNewLadder(IN newLadderFoot int, IN newLadderTop int)
BEGIN

	DECLARE ladderGameID INT;
    SELECT MAX(GameID) INTO ladderGameID from Game;
    
	INSERT INTO Ladders(ladderFoot, ladderTop, Game_gameID)
	VALUES (newLadderFoot, newLadderTop, ladderGameID);
END //
DELIMITER ;

-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Boosts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Boosts` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Boosts` (
  `boostID` INT NOT NULL AUTO_INCREMENT,
  `boostLocation` INT NOT NULL,
  `Game_gameID` INT NOT NULL,
  PRIMARY KEY (`boostID`),
  -- INDEX `fk_Boosts_Game1_idx` (`Game_gameID` ASC) VISIBLE,
  -- CONSTRAINT `fk_Boosts_Game1`
    FOREIGN KEY (`Game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Procedure passes in Boost data from call into table. gameID pulled from last field created. 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS AddNewBoost;

DELIMITER //
CREATE PROCEDURE AddNewBoost (IN boostLocation int)
BEGIN

	DECLARE boostGameID INT;
    SELECT MAX(GameID) INTO boostGameID from Game;

	INSERT INTO Boosts(boostLocation, Game_gameID)
	VALUES (boostLocation, boostGameID);
END //
DELIMITER ;


-- -----------------------------------------------------
-- Table `snakesAndLaddersData`.`Moves`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snakesAndLaddersData`.`Moves` ;

CREATE TABLE IF NOT EXISTS `snakesAndLaddersData`.`Moves` (
  `moveID` INT NOT NULL AUTO_INCREMENT,
  `moveStart` INT NOT NULL,
  `moveEnd` INT NOT NULL,
  `moveRoll` INT,
  `Players_playerID` INT NOT NULL,
  `Game_gameID` INT NOT NULL,
  PRIMARY KEY (`moveID`),
  -- UNIQUE INDEX `moveStart_UNIQUE`snakesplayersmovesladdersgamediceboosts (`moveStart` ASC) VISIBLE,
  -- UNIQUE INDEX `moveEnd_UNIQUE` (`moveEnd` ASC) VISIBLE,
  -- INDEX `fk_Moves_Players1_idx` (`Players_playerID` ASC) VISIBLE,
  -- INDEX `fk_Moves_Game1_idx` (`Game_gameID` ASC) VISIBLE,
  -- CONSTRAINT `fk_Moves_Players1`
    FOREIGN KEY (`Players_playerID`)
    REFERENCES `snakesAndLaddersData`.`Players` (`playerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  -- CONSTRAINT `fk_Moves_Game1`
    FOREIGN KEY (`Game_gameID`)
    REFERENCES `snakesAndLaddersData`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Trigger calculates diceroll into table upon entry of player positions on turn.
-- -----------------------------------------------------
-- DELIMITER //

CREATE TRIGGER calcMoveRoll AFTER INSERT
ON Moves
FOR EACH ROW
UPDATE calcMoveRoll SET NEW.moveRoll = moveEnd - moveStart;

-- END //
-- DELIMITER ;


-- ----------------------------------------------------------------------------------
--
-- SCRIPT & PROCEDURE TESTS
-- 
-- ----------------------------------------------------------------------------------

-- -----------------------------------------------------
-- #1 AddNewSnake TEST. Adds new snakes & current game ID to ensure data being added correctly.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS AddSnakeTest;

DELIMITER &&
CREATE PROCEDURE AddSnakeTest()
BEGIN

	CALL AddNewSnake (4,2);

	insert into Game(GameTurn, boardSize, winningSquare, gameHasEnded, boostSquarefeature, winningSquareFeature, Dice_diceID)
	values (0, 25, 25, false, false, false, 1);

	CALL AddNewBoost (19,12);
	SELECT * FROM Snakes;

	DELETE FROM Snakes WHERE snakeID = 
		(SELECT MAX(snakeID) FROM Snakes);
    DELETE FROM Snakes WHERE snakeID = 
		(SELECT MAX(snakeID) FROM Snakes);
	DELETE FROM Game WHERE gameID = 
        (SELECT MAX(gameID)FROM Game);
    
END &&
DELIMITER ;

CALL AddSnakeTest;

-- -----------------------------------------------------
-- #2 AddNewBoost TEST. Adds new ladders & current game ID to ensure data being added correctly.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS AddLadderTest;

DELIMITER &&
CREATE PROCEDURE AddLadderTest()
BEGIN

	CALL AddNewLadder(9,13);

	insert into Game(GameTurn, boardSize, winningSquare, gameHasEnded, boostSquarefeature, winningSquareFeature, Dice_diceID)
	values (0, 25, 25, false, false, false, 1);

	CALL AddNewLadder (4,21);
	SELECT * FROM Ladders;

	DELETE FROM Ladders WHERE ladderID = 
		(SELECT MAX(ladderID) FROM Ladders);
    DELETE FROM Ladders WHERE ladderID = 
		(SELECT MAX(ladderID) FROM Ladders);
	DELETE FROM Game WHERE ladderID = 
        (SELECT MAX(gameID)FROM Game);
    
END &&
DELIMITER ;

CALL addLadderTest;

-- -----------------------------------------------------
-- #3 AddNewBoost TEST. Adds new boost square locations & current game ID to ensure data being added correctly.
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS AddBoostTest;

DELIMITER &&
CREATE PROCEDURE AddBoostTest()
BEGIN

	CALL AddNewBoost(14);

	insert into Game(GameTurn, boardSize, winningSquare, gameHasEnded, boostSquarefeature, winningSquareFeature, Dice_diceID)
	values (0, 25, 25, false, false, false, 1);

	CALL AddNewBoost (19);
	SELECT * FROM Boosts;
	
    -- remove all data from test after confirmation of completion.
	DELETE FROM Boosts WHERE boostID = 
		(SELECT MAX(boostID) FROM Ladders);
    DELETE FROM Boosts WHERE boostID = 
		(SELECT MAX(boostID) FROM Ladders);
	DELETE FROM Game WHERE boostID = 
        (SELECT MAX(gameID)FROM Game);
    
END &&
DELIMITER ;

CALL AddBoostTest;



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;



